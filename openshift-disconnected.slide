Openshift in a Disconnected world
21 Sep 2021
Tags: Openshift, Disconnected, IPv6

Juan Manuel Parrilla
Principal Software Engineer, Red Hat
jparrill@redhat.com

Mario Vazquez Cebrian
Principal Software Engineer, Red Hat
mavazque@redhat.com

* The disconnected environments are dark places!

.image assets/img/zelda.jpg 400 600

Be sure you check the documentation before to start dealing with a real one!
.background assets/img/background.png

########

* Index

- Pre-requisites

    - The Helper node
    - Kernel Parameters
    - Additional Services: DHCP, DNS, etc...
    - Container Image Sync
    - Download RHCOS Resources
    - Networking
    - The install-config file
    - CAs and ICSPs

- OCP Deployment
    
    - UPI/IPI
    - Deployment Customization

- Filling the Marketplace 
- Openshift and Operators Life-cycle

.background assets/img/background.png

########
* Pre-requisites

.background assets/img/background.png

########
* Pre-requisites: Helper Node

Basically all pre-requisites comes from the *helper* *node*. We call a helper node to that one which gives the basic services to that environment, like DNS, DHCP, HTTPD, etc... So let's create a list of services necessary to make this work:

.image assets/img/pre-reqs.png 370 780

.background assets/img/background.png

########
* Pre-requisites: Helper Node
We can classify them as you see in the diagram:

- Mandatory
- Mandatory for Disconnected
- Mandatory for IPv6
- Optional Components

.background assets/img/background.png

########
* Pre-requisites: Helper Node

- As *DNS* and *DHCP* we will use `Dnsmasq` software because it can hold both configs.
- For *NTP* we will use `Chrony`
- For *Internal* *Registry* we will use a podman container with a basic image registry
- For the *HTTP* server we will use `HTTPD`
- For RA's and route spreading on the IPv6 environment we will use RaDVD
- To allow access to the Openshift Console and the BMC's we will have an *HAProxy* that makes the IPv4>IPv6 translation

These are the basic components on the Helper Node.

.background assets/img/background.png

########
* Pre-requisites: Kernel Parameters

Another important things to make sure the services on the Helper Node works fine, we need to add these config to the Kernel:

    # Enable IPv6 Forwading for all interfaces
    net.ipv6.conf.all.forwarding=1
    
    # Accept RA's even if forwarding is enabled
    net.ipv6.conf.all.accept_ra=2
    
    # Reverse Path not validated
    net.ipv4.conf.all.rp_filter=0
    
    # Disable IPv6 Loopback config
    net.ipv6.conf.lo.disable_ipv6=0

.link https://sysctl-explorer.net

.background assets/img/background.png
########
* Pre-requisites: Additional Services
Firstly we need a couple of mandatory services, they will be DNS and NTP.

- DNS needs to at least resolve the main openshift addresses, which are the Ingress, the API and the api-int, also the OCP master nodes and lastly our helper node. (This last one for the Image Registry.
- The NTP is also mandatory in a multinode deployment, we usually put a server on the Helper node and allow the network we are on the `chrony.conf`
- The Pull Secret is to get the proper access to the images for the installation and Image Synchronization process
.background assets/img/background.png

########
* Pre-requisites: Image Sync

To start the image synchronization for the OCP installation it's quite easy, we will just need to :

- Create a TLS Certificate for our registry with the proper DNS name (it should be SSL)
.code assets/src/cert-maker.sh /^host/,/htpasswd/
.background assets/img/background.png

########
* Pre-requisites: Image Sync
- Start the Image Registry in local
.code assets/src/start-registry.sh /^podman/,/docker/

> Apart from the desired configuration for your registry ensure the compatibility `schema1` it's enabled
.background assets/img/background.png

########
* Pre-requisites: Image Sync

- Download the official oc client and fill the script vairables 
.code assets/src/release-sync-full.sh /^# Variables/,/NO/

- Now execute the synchronization:
.code assets/src/release-sync-full.sh /^*oc adm/,/--to-release-image/

.background assets/img/background.png

########
* Pre-requisites: Download RHCOS Resources

Once synced the container images, we need to download the RHCOS images for the OCP deployment, to do that we have a script to help you that extracts the information from the Openshift installer:

- Download the Openshift-Baremetal Installer

.code assets/src/release-sync-full.sh /^*Downloading IPI/,/--to ./
This will extract the IPI installer binary from the desired release you wanna install.
Ensure you move to the OS path and change the execution permissions flag on the binary.
.background assets/img/background.png

########
* Pre-requisites: Download RHCOS Resources
- Download the RHCOS Images

For that we use the Installer to extract the proper URLs for the selected release (which are hardcoded), this is a sample about how to extract them but you can find all needed resources in the `assets/src/release-sync-full.sh` script 

    # RHCOS Version
    openshift-baremetal-install coreos print-stream-json \
    | jq -r '.["architectures"]["x86_64"]["artifacts"]["metal"]["release"]'

    # RHCOS ISO URI
    openshift-baremetal-install coreos print-stream-json \
    | jq -r '.["architectures"]["x86_64"]["artifacts"]["metal"]["formats"]["iso"]["disk"]["location"]'

These ones and some more are necessary to install our OCP Hub Cluster, the script will help you to identify which ones are necessary and where to place them.

.background assets/img/background.png
########

* Pre-requisites: Download RHCOS Resources

Summarizing you will need these elements to place them into the `install-config.yaml` file:

- QEMU URI
- QEMU SHA256 Uncompressed
- OPENSTACK URI
- OPENSTACK SHA256 Compressed

In the `install-config.yaml` format will be something like:

    bootstrapOSImage: http://[2100:52:1302::1]/rhcos-qemu.x86_64.qcow2.gz?sha256=17868a1963ae2eae25...
    clusterOSImage: http://[2100:52:1302::1]/rhcos-openstack.x86_64.qcow2.gz?sha256=6ab5c6413f27527...

The IPv6 with the image name is our internal server hosting the images
The `sha256=...` is the hash referenced on the binary

.background assets/img/background.png

########
* Pre-requisites: Networking 

The networking part I think it's a bit tricky, because you need to know how IPv6 works in a generic network with the RA/NA/ND and so on, once you know that, you need apply it to your network checking with your network admin if some capabilities are disabled or not, let's get into it.

Important points to discuss:

- DNSMASQ and RAs
- IPv6 forwarding on the OS
- SLAAC Addresses
- PXE vs VirtualMedia
- BootMode: UEFI vs Legacy


.background assets/img/background.png
########
